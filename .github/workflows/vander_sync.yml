name: Sync from Vanderlin
on:
  schedule:
    - cron: "0 3 * * *"   # runs daily at 3am UTC
  workflow_dispatch:       # allow manual trigger

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Noctra repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Add Vanderlin remote and fetch
        run: |
          git remote add vanderlin https://github.com/Monkestation/Vanderlin.git
          git fetch vanderlin
          git fetch origin
          
      - name: Check if sync is needed
        id: check_sync
        run: |
          # Get the last sync commit to find what we've already synced
          last_sync_commit=$(git log origin/main --grep="Sync from Vanderlin" --format="%H" -n 1 || echo "")
          
          if [ -n "$last_sync_commit" ]; then
            echo "Found last sync commit: $last_sync_commit"
            # Check if there are new commits in Vanderlin since our last sync
            new_commits=$(git rev-list --count $last_sync_commit..vanderlin/main 2>/dev/null || git rev-list --count vanderlin/main)
          else
            echo "No previous sync found, checking all commits"
            new_commits=$(git rev-list --count vanderlin/main)
          fi
          
          echo "New commits to sync: $new_commits"
          echo "new_commits=$new_commits" >> $GITHUB_OUTPUT
          echo "last_sync_commit=$last_sync_commit" >> $GITHUB_OUTPUT
          
          if [ "$new_commits" -eq 0 ]; then
            echo "No new commits to sync"
            echo "needs_sync=false" >> $GITHUB_OUTPUT
          else
            echo "Sync needed"
            echo "needs_sync=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Skip if no changes
        if: steps.check_sync.outputs.needs_sync == 'false'
        run: |
          echo "No new changes to sync from Vanderlin. Exiting."
          exit 0
          
      - name: Debug - Show what we're syncing
        if: steps.check_sync.outputs.needs_sync == 'true'
        run: |
          echo "=== Changes to be synced ==="
          if [ -n "${{ steps.check_sync.outputs.last_sync_commit }}" ]; then
            echo "Changes since last sync:"
            git log --oneline ${{ steps.check_sync.outputs.last_sync_commit }}..vanderlin/main
          else
            echo "Latest commits from Vanderlin:"
            git log --oneline vanderlin/main -10
          fi
          
      - name: Create sync branch
        if: steps.check_sync.outputs.needs_sync == 'true'
        run: |
          # Delete existing sync branch if it exists
          git branch -D sync-from-vander 2>/dev/null || true
          git push origin --delete sync-from-vander 2>/dev/null || true
          
          # Create fresh sync branch from current main
          git checkout -b sync-from-vander origin/main
          
      - name: Apply Vanderlin changes using cherry-pick
        if: steps.check_sync.outputs.needs_sync == 'true'
        id: sync_step
        run: |
          # Determine the range of commits to cherry-pick
          if [ -n "${{ steps.check_sync.outputs.last_sync_commit }}" ]; then
            commit_range="${{ steps.check_sync.outputs.last_sync_commit }}..vanderlin/main"
          else
            # For first sync, get a reasonable number of recent commits
            commit_range="vanderlin/main~10..vanderlin/main"
          fi
          
          echo "Cherry-picking commits from range: $commit_range"
          
          # Get list of commits to cherry-pick (oldest first)
          commits_to_pick=$(git rev-list --reverse $commit_range 2>/dev/null || echo "")
          
          if [ -z "$commits_to_pick" ]; then
            echo "No commits found in range"
            echo "sync_status=no_commits" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "Commits to cherry-pick:"
          echo "$commits_to_pick"
          
          # Cherry-pick each commit
          conflicts_found=false
          successful_picks=0
          failed_picks=""
          
          for commit in $commits_to_pick; do
            echo "Cherry-picking $commit"
            commit_msg=$(git log --format="%s" -n 1 $commit)
            
            if git cherry-pick $commit --no-ff; then
              echo " Successfully picked: $commit_msg"
              successful_picks=$((successful_picks + 1))
            else
              echo "Conflicts in: $commit_msg"
              conflicts_found=true
              failed_picks="$failed_picks\n- $commit: $commit_msg"
              
              # List conflicted files
              conflicted_files=$(git diff --name-only --diff-filter=U)
              echo "Conflicted files: $conflicted_files"
              
              # Add conflicted files and continue
              git add -A
              git commit --no-edit || git cherry-pick --continue
            fi
          done
          
          # Create summary commit
          summary_msg="Sync from Vanderlin: $successful_picks commits"
          if [ "$conflicts_found" = true ]; then
            summary_msg="$summary_msg (with conflicts)"
            echo "sync_status=conflicts" >> $GITHUB_OUTPUT
            echo "failed_picks<<EOF" >> $GITHUB_OUTPUT
            echo -e "$failed_picks" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "sync_status=success" >> $GITHUB_OUTPUT
          fi
          
          echo "successful_picks=$successful_picks" >> $GITHUB_OUTPUT
          
      - name: Push sync branch
        if: steps.check_sync.outputs.needs_sync == 'true'
        run: |
          git push origin sync-from-vander --force
          
      - name: Create Pull Request
        if: steps.check_sync.outputs.needs_sync == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Prepare PR body based on sync status
          if [ "${{ steps.sync_step.outputs.sync_status }}" = "conflicts" ]; then
            pr_body="This PR syncs ${{ steps.sync_step.outputs.successful_picks }} commits from Vanderlin into Noctra.

          **MERGE CONFLICTS DETECTED** - Some commits had conflicts that were automatically resolved.

          ## Commits with conflicts:
          ${{ steps.sync_step.outputs.failed_picks }}

          Please review the automatic conflict resolution and ensure it's correct.

          Auto-generated sync from GitHub Actions run #${{ github.run_number }}
          Triggered at: $(date)"
            pr_title="âš  Sync from Vanderlin (${{ steps.sync_step.outputs.successful_picks }} commits) - Review conflicts"
          else
            pr_body="This PR cleanly syncs ${{ steps.sync_step.outputs.successful_picks }} new commits from Vanderlin into Noctra.

           **Clean merge** - No conflicts detected.

          ## Recent changes:
          $(git log --oneline sync-from-vander ^origin/main --max-count=10)

          Auto-generated sync from GitHub Actions run #${{ github.run_number }}
          Triggered at: $(date)"
            pr_title=" Sync from Vanderlin (${{ steps.sync_step.outputs.successful_picks }} commits)"
          fi

          # Create PR using GitHub CLI
          gh pr create \
            --base main \
            --head sync-from-vander \
            --title "$pr_title" \
            --body "$pr_body" \
            || echo "PR creation failed or already exists"
